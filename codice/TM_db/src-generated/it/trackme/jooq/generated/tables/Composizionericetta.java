/*
 * This file is generated by jOOQ.
 */
package it.trackme.jooq.generated.tables;


import it.trackme.jooq.generated.DefaultSchema;
import it.trackme.jooq.generated.tables.records.ComposizionericettaRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Composizionericetta extends TableImpl<ComposizionericettaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>composizioneRicetta</code>
     */
    public static final Composizionericetta COMPOSIZIONERICETTA = new Composizionericetta();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ComposizionericettaRecord> getRecordType() {
        return ComposizionericettaRecord.class;
    }

    /**
     * The column <code>composizioneRicetta.idRicetta</code>.
     */
    public final TableField<ComposizionericettaRecord, Integer> IDRICETTA = createField(DSL.name("idRicetta"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>composizioneRicetta.idAlimento</code>.
     */
    public final TableField<ComposizionericettaRecord, Integer> IDALIMENTO = createField(DSL.name("idAlimento"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>composizioneRicetta.dose</code>.
     */
    public final TableField<ComposizionericettaRecord, Integer> DOSE = createField(DSL.name("dose"), SQLDataType.INTEGER.nullable(false), this, "");

    private Composizionericetta(Name alias, Table<ComposizionericettaRecord> aliased) {
        this(alias, aliased, null);
    }

    private Composizionericetta(Name alias, Table<ComposizionericettaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>composizioneRicetta</code> table reference
     */
    public Composizionericetta(String alias) {
        this(DSL.name(alias), COMPOSIZIONERICETTA);
    }

    /**
     * Create an aliased <code>composizioneRicetta</code> table reference
     */
    public Composizionericetta(Name alias) {
        this(alias, COMPOSIZIONERICETTA);
    }

    /**
     * Create a <code>composizioneRicetta</code> table reference
     */
    public Composizionericetta() {
        this(DSL.name("composizioneRicetta"), null);
    }

    public <O extends Record> Composizionericetta(Table<O> child, ForeignKey<O, ComposizionericettaRecord> key) {
        super(child, key, COMPOSIZIONERICETTA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Composizionericetta as(String alias) {
        return new Composizionericetta(DSL.name(alias), this);
    }

    @Override
    public Composizionericetta as(Name alias) {
        return new Composizionericetta(alias, this);
    }

    @Override
    public Composizionericetta as(Table<?> alias) {
        return new Composizionericetta(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Composizionericetta rename(String name) {
        return new Composizionericetta(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Composizionericetta rename(Name name) {
        return new Composizionericetta(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Composizionericetta rename(Table<?> name) {
        return new Composizionericetta(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
