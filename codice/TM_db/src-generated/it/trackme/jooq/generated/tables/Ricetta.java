/*
 * This file is generated by jOOQ.
 */
package it.trackme.jooq.generated.tables;


import it.trackme.jooq.generated.DefaultSchema;
import it.trackme.jooq.generated.Keys;
import it.trackme.jooq.generated.tables.records.RicettaRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Ricetta extends TableImpl<RicettaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ricetta</code>
     */
    public static final Ricetta RICETTA = new Ricetta();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RicettaRecord> getRecordType() {
        return RicettaRecord.class;
    }

    /**
     * The column <code>ricetta.idRicetta</code>.
     */
    public final TableField<RicettaRecord, Integer> IDRICETTA = createField(DSL.name("idRicetta"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>ricetta.quantità</code>.
     */
    public final TableField<RicettaRecord, Integer> QUANTITÀ = createField(DSL.name("quantità"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ricetta.nome</code>.
     */
    public final TableField<RicettaRecord, String> NOME = createField(DSL.name("nome"), SQLDataType.CLOB.nullable(false), this, "");

    private Ricetta(Name alias, Table<RicettaRecord> aliased) {
        this(alias, aliased, null);
    }

    private Ricetta(Name alias, Table<RicettaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ricetta</code> table reference
     */
    public Ricetta(String alias) {
        this(DSL.name(alias), RICETTA);
    }

    /**
     * Create an aliased <code>ricetta</code> table reference
     */
    public Ricetta(Name alias) {
        this(alias, RICETTA);
    }

    /**
     * Create a <code>ricetta</code> table reference
     */
    public Ricetta() {
        this(DSL.name("ricetta"), null);
    }

    public <O extends Record> Ricetta(Table<O> child, ForeignKey<O, RicettaRecord> key) {
        super(child, key, RICETTA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<RicettaRecord, Integer> getIdentity() {
        return (Identity<RicettaRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<RicettaRecord> getPrimaryKey() {
        return Keys.RICETTA__PK_RICETTA;
    }

    @Override
    public Ricetta as(String alias) {
        return new Ricetta(DSL.name(alias), this);
    }

    @Override
    public Ricetta as(Name alias) {
        return new Ricetta(alias, this);
    }

    @Override
    public Ricetta as(Table<?> alias) {
        return new Ricetta(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ricetta rename(String name) {
        return new Ricetta(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ricetta rename(Name name) {
        return new Ricetta(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ricetta rename(Table<?> name) {
        return new Ricetta(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
