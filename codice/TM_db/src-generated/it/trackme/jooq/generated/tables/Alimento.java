/*
 * This file is generated by jOOQ.
 */
package it.trackme.jooq.generated.tables;


import it.trackme.jooq.generated.DefaultSchema;
import it.trackme.jooq.generated.Keys;
import it.trackme.jooq.generated.tables.records.AlimentoRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Alimento extends TableImpl<AlimentoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>alimento</code>
     */
    public static final Alimento ALIMENTO = new Alimento();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AlimentoRecord> getRecordType() {
        return AlimentoRecord.class;
    }

    /**
     * The column <code>alimento.idAlimento</code>.
     */
    public final TableField<AlimentoRecord, Integer> IDALIMENTO = createField(DSL.name("idAlimento"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>alimento.nome</code>.
     */
    public final TableField<AlimentoRecord, String> NOME = createField(DSL.name("nome"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>alimento.calorie</code>.
     */
    public final TableField<AlimentoRecord, Integer> CALORIE = createField(DSL.name("calorie"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>alimento.carbo</code>.
     */
    public final TableField<AlimentoRecord, Float> CARBO = createField(DSL.name("carbo"), SQLDataType.REAL.nullable(false), this, "");

    /**
     * The column <code>alimento.proteine</code>.
     */
    public final TableField<AlimentoRecord, Float> PROTEINE = createField(DSL.name("proteine"), SQLDataType.REAL.nullable(false), this, "");

    /**
     * The column <code>alimento.grassi</code>.
     */
    public final TableField<AlimentoRecord, Float> GRASSI = createField(DSL.name("grassi"), SQLDataType.REAL.nullable(false), this, "");

    private Alimento(Name alias, Table<AlimentoRecord> aliased) {
        this(alias, aliased, null);
    }

    private Alimento(Name alias, Table<AlimentoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>alimento</code> table reference
     */
    public Alimento(String alias) {
        this(DSL.name(alias), ALIMENTO);
    }

    /**
     * Create an aliased <code>alimento</code> table reference
     */
    public Alimento(Name alias) {
        this(alias, ALIMENTO);
    }

    /**
     * Create a <code>alimento</code> table reference
     */
    public Alimento() {
        this(DSL.name("alimento"), null);
    }

    public <O extends Record> Alimento(Table<O> child, ForeignKey<O, AlimentoRecord> key) {
        super(child, key, ALIMENTO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<AlimentoRecord, Integer> getIdentity() {
        return (Identity<AlimentoRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AlimentoRecord> getPrimaryKey() {
        return Keys.ALIMENTO__PK_ALIMENTO;
    }

    @Override
    public Alimento as(String alias) {
        return new Alimento(DSL.name(alias), this);
    }

    @Override
    public Alimento as(Name alias) {
        return new Alimento(alias, this);
    }

    @Override
    public Alimento as(Table<?> alias) {
        return new Alimento(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Alimento rename(String name) {
        return new Alimento(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Alimento rename(Name name) {
        return new Alimento(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Alimento rename(Table<?> name) {
        return new Alimento(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, Integer, Float, Float, Float> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super String, ? super Integer, ? super Float, ? super Float, ? super Float, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super String, ? super Integer, ? super Float, ? super Float, ? super Float, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
