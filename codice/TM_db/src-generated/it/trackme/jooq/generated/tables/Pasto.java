/*
 * This file is generated by jOOQ.
 */
package it.trackme.jooq.generated.tables;


import it.trackme.jooq.generated.DefaultSchema;
import it.trackme.jooq.generated.Keys;
import it.trackme.jooq.generated.tables.records.PastoRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Pasto extends TableImpl<PastoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pasto</code>
     */
    public static final Pasto PASTO = new Pasto();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PastoRecord> getRecordType() {
        return PastoRecord.class;
    }

    /**
     * The column <code>pasto.idPasto</code>.
     */
    public final TableField<PastoRecord, Integer> IDPASTO = createField(DSL.name("idPasto"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>pasto.idUtente</code>.
     */
    public final TableField<PastoRecord, Integer> IDUTENTE = createField(DSL.name("idUtente"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>pasto.tipo</code>.
     */
    public final TableField<PastoRecord, String> TIPO = createField(DSL.name("tipo"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>pasto.data</code>.
     */
    public final TableField<PastoRecord, LocalDate> DATA = createField(DSL.name("data"), SQLDataType.LOCALDATE.nullable(false), this, "");

    private Pasto(Name alias, Table<PastoRecord> aliased) {
        this(alias, aliased, null);
    }

    private Pasto(Name alias, Table<PastoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pasto</code> table reference
     */
    public Pasto(String alias) {
        this(DSL.name(alias), PASTO);
    }

    /**
     * Create an aliased <code>pasto</code> table reference
     */
    public Pasto(Name alias) {
        this(alias, PASTO);
    }

    /**
     * Create a <code>pasto</code> table reference
     */
    public Pasto() {
        this(DSL.name("pasto"), null);
    }

    public <O extends Record> Pasto(Table<O> child, ForeignKey<O, PastoRecord> key) {
        super(child, key, PASTO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<PastoRecord, Integer> getIdentity() {
        return (Identity<PastoRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PastoRecord> getPrimaryKey() {
        return Keys.PASTO__PK_PASTO;
    }

    @Override
    public List<Check<PastoRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name(""), "tipo in ('colazione', 'pranzo', 'cena', 'spuntino')", true)
        );
    }

    @Override
    public Pasto as(String alias) {
        return new Pasto(DSL.name(alias), this);
    }

    @Override
    public Pasto as(Name alias) {
        return new Pasto(alias, this);
    }

    @Override
    public Pasto as(Table<?> alias) {
        return new Pasto(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Pasto rename(String name) {
        return new Pasto(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Pasto rename(Name name) {
        return new Pasto(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Pasto rename(Table<?> name) {
        return new Pasto(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, String, LocalDate> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super Integer, ? super String, ? super LocalDate, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super Integer, ? super String, ? super LocalDate, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
