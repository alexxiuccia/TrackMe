/*
 * This file is generated by jOOQ.
 */
package it.trackme.jooq.generated.tables.records;


import it.trackme.jooq.generated.tables.Composizionericetta;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ComposizionericettaRecord extends UpdatableRecordImpl<ComposizionericettaRecord> implements Record3<Integer, Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>composizioneRicetta.idRicetta</code>.
     */
    public void setIdricetta(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>composizioneRicetta.idRicetta</code>.
     */
    public Integer getIdricetta() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>composizioneRicetta.idAlimento</code>.
     */
    public void setIdalimento(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>composizioneRicetta.idAlimento</code>.
     */
    public Integer getIdalimento() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>composizioneRicetta.dose</code>.
     */
    public void setDose(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>composizioneRicetta.dose</code>.
     */
    public Integer getDose() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Integer, Integer> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, Integer, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Composizionericetta.COMPOSIZIONERICETTA.IDRICETTA;
    }

    @Override
    public Field<Integer> field2() {
        return Composizionericetta.COMPOSIZIONERICETTA.IDALIMENTO;
    }

    @Override
    public Field<Integer> field3() {
        return Composizionericetta.COMPOSIZIONERICETTA.DOSE;
    }

    @Override
    public Integer component1() {
        return getIdricetta();
    }

    @Override
    public Integer component2() {
        return getIdalimento();
    }

    @Override
    public Integer component3() {
        return getDose();
    }

    @Override
    public Integer value1() {
        return getIdricetta();
    }

    @Override
    public Integer value2() {
        return getIdalimento();
    }

    @Override
    public Integer value3() {
        return getDose();
    }

    @Override
    public ComposizionericettaRecord value1(Integer value) {
        setIdricetta(value);
        return this;
    }

    @Override
    public ComposizionericettaRecord value2(Integer value) {
        setIdalimento(value);
        return this;
    }

    @Override
    public ComposizionericettaRecord value3(Integer value) {
        setDose(value);
        return this;
    }

    @Override
    public ComposizionericettaRecord values(Integer value1, Integer value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ComposizionericettaRecord
     */
    public ComposizionericettaRecord() {
        super(Composizionericetta.COMPOSIZIONERICETTA);
    }

    /**
     * Create a detached, initialised ComposizionericettaRecord
     */
    public ComposizionericettaRecord(Integer idricetta, Integer idalimento, Integer dose) {
        super(Composizionericetta.COMPOSIZIONERICETTA);

        setIdricetta(idricetta);
        setIdalimento(idalimento);
        setDose(dose);
        resetChangedOnNotNull();
    }
}
